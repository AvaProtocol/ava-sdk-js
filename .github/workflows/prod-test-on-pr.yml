name: Run Production Tests on PR

on:
  pull_request:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to run tests against"
        required: true
        default: "sepolia"
        type: choice
        options:
          - sepolia
          - ethereum
          - base
          - base-sepolia
          - soneium-minato

jobs:
  production-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env: [sepolia, ethereum, base, base-sepolia, soneium-minato]
    environment: ${{ matrix.env }}
    env:
      CHAIN_ENDPOINT: ${{ vars.CHAIN_ENDPOINT }}
      TEST_PRIVATE_KEY: ${{ secrets.TEST_PRIVATE_KEY }}
      TEST_ENV: ${{ matrix.env }}
      AVS_API_KEY: ${{ secrets.AVS_API_KEY }}
      # On production env, when test run it may not cleanup data properly for multiple reasons.
      # In the next run, especially on pagination test, the assumption about data is wrong.
      # For those kind of particular test, we want to ensure a 100% unique salt across run
      # One way to do so, is get this run_id from github action and use it as salt
      # On local dev, we just default to a hard code number in the test to isolate its. data
      # on local test is continously wipe out on every run so it isn't a problem like production
      # We may want to sweep and delete task data on those test account
      RUN_ID: ${{ github.run_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0 # Fetch all history for all branches

      - name: Debug environment variables
        run: |
          echo "TEST_ENV: $TEST_ENV"
          echo "Using environment: ${{ matrix.env }}"
          echo "CHAIN_ENDPOINT: $CHAIN_ENDPOINT"

      - name: Check Source or Test Code Changes
        id: check_source_changes
        if: github.event_name == 'pull_request'
        run: |
          echo "=== Pull Request Information ==="
          echo "PR Base SHA: ${{ github.event.pull_request.base.sha }}"
          echo "PR Head SHA: ${{ github.event.pull_request.head.sha }}"
          echo "PR Head Ref: ${{ github.event.pull_request.head.ref }}"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "Base Branch: ${{ github.base_ref }}"

          # Fetch both branches
          git fetch origin ${{ github.base_ref }}
          git fetch origin ${{ github.event.pull_request.head.ref }}

          # Get all changed files (only names)
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} HEAD)

          # Define the source code patterns we want to monitor
          SOURCE_PATTERN='^(packages/sdk-js/src|packages/types/src|tests)'

          echo "=== Git Information ==="
          echo "Current branch: $(git branch --show-current)"
          echo "Git status:"
          git status

          echo "=== Changed Files ==="
          echo "$CHANGED_FILES"

          # Check if any files in our monitored directories have changed
          MATCHING_FILES=$(echo "$CHANGED_FILES" | grep -E "$SOURCE_PATTERN" || echo "")

          echo "=== Matching Files ==="
          echo "$MATCHING_FILES"

          if [ -z "$MATCHING_FILES" ]; then
            echo "source_changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected in monitored directories, skipping tests"
          else
            echo "source_changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected in monitored directories:"
            echo "$MATCHING_FILES"
          fi
        shell: bash

      - name: Use Node.js
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "yarn"

      - name: Install dependencies
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn install

      - name: Print Required Environment Variables
        if: steps.check_source_changes.outputs.source_changed == 'true'
        run: |
          echo "=== Required Variables from envalid.ts ==="
          echo "AVS_API_KEY: ...${AVS_API_KEY: -6}" # Show last 6 chars for security
          echo "CHAIN_ENDPOINT: $CHAIN_ENDPOINT"
          echo "TEST_PRIVATE_KEY: ...${TEST_PRIVATE_KEY: -6}" # Show last 6 chars for security
          echo "TEST_ENV: $TEST_ENV"

      - name: Build the SDK
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn build

      - name: Test Authentication
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:auth

      - name: Test Create Workflow
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:createWorkflow

      - name: Test Get Workflow
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:getWorkflow

      - name: Test Get Workflows
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:getWorkflows

      - name: Test Cancel Workflow
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:cancelWorkflow

      - name: Test Delete Workflow
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:deleteWorkflow

      - name: Test Trigger Workflow
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:triggerWorkflow

      # - name: Test Get Execution
      #   if: steps.check_source_changes.outputs.source_changed == 'true'
      #   run: yarn test:getExecution

      - name: Test Get Executions
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:getExecutions

      - name: Test Get Wallet
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:getWallet

      - name: Test Get Wallets
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:getWallets

      - name: Test Secret
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:secret
