name: Run Dev Tests on PR

on:
  pull_request:
  workflow_dispatch:
    inputs:
      docker_image_tag:
        description: "Docker Image Tag of avaprotocol/avs-dev"
        required: false
        default: "latest" # Or use an empty default if you want to force it from elsewhere for PRs

jobs:
  dev-test:
    runs-on: ubuntu-latest
    environment: dev

    env:
      CHAIN_ENDPOINT: ${{ vars.CHAIN_ENDPOINT }}
      ENDPOINT: "localhost:2206"
      TEST_PRIVATE_KEY: ${{ secrets.TEST_PRIVATE_KEY }}
      DOCKER_IMAGE_TAG: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.docker_image_tag || 'latest' }} # Or your preferred default for PRs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug environment variables
        run: |
          echo "ENDPOINT: $ENDPOINT"
          echo "DOCKER_IMAGE_TAG: $DOCKER_IMAGE_TAG"

      - name: Check Source or Test Code Changes
        id: check_source_changes
        if: github.event_name == 'pull_request'
        run: |
          echo "PR Base SHA: ${{ github.event.pull_request.base.sha }}"
          echo "PR Head SHA: ${{ github.event.pull_request.head.sha }}"
          echo "GitHub Ref: ${{ github.ref }}"

          # Ensure we have the base branch
          git fetch origin ${{ github.base_ref }} --depth=1

          # Get all changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} HEAD)

          # Define the source code patterns we want to monitor
          SOURCE_PATTERN='^(packages/sdk-js/src|packages/types/src|tests)'

          echo "=== Debug Information ==="
          echo "Base ref: ${{ github.base_ref }}"
          echo "Current branch: $(git branch --show-current)"
          echo "Git status:"
          git status

          echo "=== Changed Files ==="
          echo "$CHANGED_FILES"

          # Check if any files in our monitored directories have changed
          MATCHING_FILES=$(echo "$CHANGED_FILES" | grep -E "$SOURCE_PATTERN" || echo "")

          echo "=== Matching Files ==="
          echo "$MATCHING_FILES"

          if [ -z "$MATCHING_FILES" ]; then
            echo "source_changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected in monitored directories, skipping tests"
          else
            echo "source_changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected in monitored directories:"
            echo "$MATCHING_FILES"
          fi
        shell: bash

      - name: Run local AVS aggregator in Docker
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: |
          echo "Starting AVS aggregator with version: $DOCKER_IMAGE_TAG"
          docker compose up -d

      - name: Use Node.js
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "yarn"

      - name: Install dependencies
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn install

      - name: Ensure the aggregator is running
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: |
          until curl --output /dev/null --silent --fail http://localhost:1323/up; do
            printf '.'
            sleep 5
          done

      - name: Retrieve AVS API Key from the aggregator
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        id: setup-env
        run: |
          echo "AVS_API_KEY=$(docker compose exec aggregator /ava create-api-key --role=admin --subject=apikey)" >> $GITHUB_ENV
          echo "ENDPOINT=localhost:2206" >> $GITHUB_ENV

      - name: Print Required Environment Variables
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: |
          echo "=== Required Variables from envalid.ts ==="
          echo "AVS_API_KEY: ...${AVS_API_KEY: -6}" # Show last 6 chars for security
          echo "CHAIN_ENDPOINT: $CHAIN_ENDPOINT"
          echo "TEST_PRIVATE_KEY: ...${TEST_PRIVATE_KEY: -6}" # Show last 6 chars for security
          echo "TEST_ENV: dev"

      - name: Build the SDK for local test
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn build

      - name: Test Authentication
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:auth

      - name: Test Create Workflow
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:createWorkflow

      - name: Test Get Workflow
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:getWorkflow

      - name: Test Get Workflows
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:getWorkflows

      - name: Test Cancel Workflow
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:cancelWorkflow

      - name: Test Delete Workflow
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:deleteWorkflow

      - name: Test Trigger Workflow
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:triggerWorkflow

      - name: Test Get Execution
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:getExecution

      - name: Test Get Executions
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:getExecutions

      - name: Test Get Wallet
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:getWallet

      - name: Test Get Wallets
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:getWallets

      - name: Test Secret
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:secret

      - name: Test Run Node With Inputs
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:node

      - name: Test Loop Node
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:loop

      - name: Test Custom Code
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:customcode

      - name: Test Event Trigger
        if: github.event_name == 'workflow_dispatch' || steps.check_source_changes.outputs.source_changed == 'true'
        run: yarn test:event
